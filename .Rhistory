runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
cm2 <- confusionMatrix(as.factor(fitted.results),testSplit$Class)
cbind("Logistic Regression",t(cm2$byClass[1:2]))
runApp('Desktop/SVM Shiny/SVMS')
y <- reactive({input$compare})
y
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
q=cbind("SVM",t(cm1$byClass[1:2]))
cm2 <- confusionMatrix(as.factor(fitted.results),testSplit$Class)
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
q=cbind("SVM",t(cm1$byClass[1:2]))
cm2 <- confusionMatrix(as.factor(fitted.results),testSplit$Class)
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
y
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("KNN",t(cm3$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,k,l,m)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("KNN",t(cm3$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,k,l,m)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
q=cbind("SVM",t(cm1$byClass[1:2]))
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
d=rbind(q,k,l,m)
names(d)[1]<-"MÃ©thode"
d
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
ineq(svm.predict,type="Gini")
ineq(fitted.results,type="Gini")
ineq(knn.model,type="Gini")
ineq(rf.pred,type="Gini")
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
q=cbind(Method="SVM",round(t(cm1$byClass[1:2]),digits=4),Gini=round(ineq(svm.predict,type="Gini"),digits=4))
s=cbind("Logistic Regression",round(t(cm2$byClass[1:2],digits=4)),round(ineq(fitted.results,type="Gini"),digits=4))
rbind(q,s)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
install.packages("rsconnect")
shiny::runApp('Documents/GitHub/SVM_PROJECT')
??roc
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
install.packages("smotefamily")
install.packages("smotefamily")
library(DMwR)
library(e1071)
library(pROC)
library(class)
library(randomForest)
library(caret)
library(ineq)
library(smotefamily)
library(ROSE)
library(lift)
### Donn?es
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"), labels=c("No","Yes"))
set.seed(12345)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainSplit = ovun.sample(Class~.,train,method="both",N=30000,p=0.3,seed=2018)
trainFraud = trainSplit$data
table(trainFraud$Class)
prop.table(table(trainFraud$Class))
### SUPPORT VECTOR MACHINE
tune.svm <- tune(svm,train.x=trainSplit[,-31],train.y=trainSplit[,31],kernel='radial',ranges=list(cost=c(2,4,6,8,10), gamma=c(0.2,0.4,0.6,0.8,1)))
### SUPPORT VECTOR MACHINE
tune.svm <- tune(svm,train.x=trainFraud[,-31],train.y=trainFraud[,31],kernel='radial',ranges=list(cost=c(2,4,6,8,10), gamma=c(0.2,0.4,0.6,0.8,1)))
trainSplit = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2018)
trainFraud = trainSplit$data
table(trainFraud$Class)
prop.table(table(trainFraud$Class))
### SUPPORT VECTOR MACHINE
tune.svm <- tune(svm,train.x=trainFraud[,-31],train.y=trainFraud[,31],kernel='radial',ranges=list(cost=c(4,6,8), gamma=c(0.4,0.6,0.8)))
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
library(DMwR)
library(e1071)
library(pROC)
library(class)
library(randomForest)
library(caret)
library(ineq)
library(smotefamily)
library(ROSE)
library(lift)
### Donn?es
creditcard <- read.csv("/Users/Victor/creditcard.csv")
### Donn?es
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"), labels=c("No","Yes"))
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainSplit = ovun.sample(Class~.,train,method="both",N=20000,p=0.3,seed=2018)
trainFraud = trainSplit$data
table(trainFraud$Class)
prop.table(table(trainFraud$Class))
### SUPPORT VECTOR MACHINE
#tune.svm <- tune(svm,train.x=trainSplit[,-31],train.y=trainSplit[,31],kernel='radial',ranges=list(cost=c(5,6,7,8,9,10), gamma=.3))
#summary(tune.svm)
svm.model <- svm(Class ~ ., data=trainFraud, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,test,type="prob")
#AUC AUPRC
a = as.numeric(svm.predict)
roc(test$Class,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=40, print.auc.x=10)
roc(test$Class,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=40, print.auc.x=10)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
creditcard <- readRDS(file=url("https://raw.githubusercontent.com/VictorYeGitHub/SVM_PROJECT/master/creditcard.rds"))
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
s
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
library(shiny)
library(DMwR)
library(e1071)
library(pROC)
library(class)
library(randomForest)
library(caret)
library(ineq)
library(shinythemes)
library(smotefamily)
library(ROSE)
library(lift)
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,test)
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,test,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
runApp('Documents/GitHub/SVM_PROJECT')
knn.model = knn(trainSplit[,-31],test[,-31],trainSplit$Class,k=1)
rf.model <- randomForest(Class~.,trainSplit , mtry=1, importance = TRUE)
rf.pred <- predict(rf.model, test)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
rf.pred <- predict(rf.model, test)
rf.model <- randomForest(Class~.,trainSplit , mtry=1, importance = TRUE)
rf.pred <- predict(rf.model, test)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
set.seed(12345)
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
#creditcard <- readRDS(file=url("https://raw.githubusercontent.com/VictorYeGitHub/SVM_PROJECT/master/creditcard.rds"))
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,test)
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,test,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
knn.model = knn(trainSplit[,-31],test[,-31],trainSplit$Class,k=1)
rf.model <- randomForest(Class~.,trainSplit , mtry=1, importance = TRUE)
rf.pred <- predict(rf.model, test)
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=input$costrad, gamma=input$gammrad)
svm.predict <- predict(svm.model,test)
roc(svm.predict,as.numeric(test$Class),plot=T,main="SVM with radial kernel",legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=30, print.auc.x=25)
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=input$costrad, gamma=input$gammrad)
svm.predict <- predict(svm.model,test)
roc(svm.predict,as.numeric(test$Class),plot=T,main="SVM with radial kernel",legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=30, print.auc.x=25)
plot(Lc(svm.predict),main="Lorenz curve",col="#377eb8",lwd=4, xlab="Cumulative percentage of the population", ylab="Cumulative percentage of the variable Class")
lines(Lc(fitted.results),col="#4daf4a",lwd=4)
lines(Lc(knn.model),col="#850606",lwd=4)
lines(Lc(rf.pred),col="#EE82EE",lwd=4)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
table(smote_data$Class)
set.seed(12345)
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
creditcard <- creditcard[sample(nrow(creditcard)),]
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 300, perc.under = 550, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 300, perc.under = 500, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 400, perc.under = 500, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 500, k=5)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 200, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 300, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 350, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 310, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 320, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 300, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 290, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 285, k=5)
table(smote_data$Class)
runApp('Documents/GitHub/SVM_PROJECT')
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(12345)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[train,]
testSplit = creditcard[-train,]
str(train)
str(test)
set.seed(12345)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[train,]
testSplit = creditcard[-train,]
train = creditcard[samp,]
testSplit = creditcard[-samp,]
str(train)
str(testSplit)
table(train$Class)
table(testSplit$Class)
prob.table(table(train$Class))
trainSplit <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 285, k=5)
str(trainSplit$Class)
table(trainSplit$Class)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp()
runApp()
??svm
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
creditcard <- readRDS(file=url("https://raw.githubusercontent.com/VictorYeGitHub/SVM_PROJECT/master/creditcard.rds"))
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
testSplit = creditcard[-samp,]
fraudData= train[train$Class==1,]
NoFraudData=train[train$Class==0,]
NoFraudData=NoFraudData[1:800,]
trainSplit=rbind(NoFraudData,fraudData)
svm.model <- svm(Class~., data=trainSplit, kernel="radial", cost=10, gamma=0.1)
svm.predict <- predict(svm.model,newdata=testSplit)
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
cm1
cm1$table
runApp()
cm1$byClass
runApp()
runApp()
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,testSplit,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
knn.model = knn(trainSplit[,-31],testSplit[,-31],trainSplit$Class,k=13)
rf.model <- randomForest(Class~.,trainSplit , ntree=180, importance = TRUE)
rf.pred <- predict(rf.model, testSplit)
cost_model = function(predicted.classes, true.classes, amounts, fixedcost) {
cost = sum(true.classes*(1 - predicted.classes)*amounts +
predicted.classes*fixedcost)
return(cost)
}
numsvm=as.numeric(svm.predict)
numsvm[numsvm == 1] <- 0
numsvm[numsvm == 2] <- 1
numfit=as.numeric(fitted.results)
numknn=as.numeric(knn.model)
numknn[numknn == 1] <- 0
numknn[numknn == 2] <- 1
numrf=as.numeric(rf.pred)
numrf[numrf == 1] <- 0
numrf[numrf == 2] <- 1
numtest=as.numeric(testSplit$Class)
numtest[numtest==1] <- 0
numtest[numtest==2] <- 1
costsvm=cost_model(numsvm,numtest, testSplit$Amount, fixedcost=10)
costfit=cost_model(numfit,numtest, testSplit$Amount, fixedcost=10)
costknn=cost_model(numknn,numtest, testSplit$Amount, fixedcost=10)
costrf=cost_model(numrf,numtest, testSplit$Amount, fixedcost=10)
numsvm=as.numeric(svm.predict)
numsvm[numsvm == 1] <- 0
numsvm[numsvm == 2] <- 1
costsvm=cost_model(numsvm,numtest, testSplit$Amount, fixedcost=10)
svm.auc <- auc(roc(testSplit$Class,as.numeric(svm.predict)))
svm.gini <- 2*svm.auc-1
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
par(mar=c(2,2,2,2))
draw_confusion_matrix <- function(cmtrx,auc,gini,loss) {
total <- sum(cmtrx$table)
layout(matrix(c(1,1,2)))
par(mar=c(2,2,2,2))
plot(c(100, 345), c(300, 450), type = "n", xlab="", ylab="", xaxt='n', yaxt='n')
title('CONFUSION MATRIX')
classes = colnames(cmtrx$table)
rect(150, 430, 240, 370, col="#45BC53")
text(195, 435, classes[1], cex=1.2)
rect(250, 430, 340, 370, col="#CC1B1B")
text(295, 435, classes[2], cex=1.2)
text(125, 370, 'Predicted', cex=1.3, srt=90, font=2)
text(245, 450, 'Actual', cex=1.3, font=2)
rect(150, 305, 240, 365, col="#CC1B1B")
rect(250, 305, 340, 365, col="#45BC53")
text(140, 400, classes[1], cex=1.2, srt=90)
text(140, 335, classes[2], cex=1.2, srt=90)
text(195, 400,cm1$table[1,1], cex=1.6, font=2, col='white')
text(295, 400,cm1$table[1,2], cex=1.6, font=2, col='white')
text(195, 335,cm1$table[2,1], cex=1.6, font=2, col='white')
text(295, 335,cm1$table[2,2], cex=1.6, font=2, col='white')
plot(c(100, 0), c(100, 0), type = "n", xlab="", ylab="", main = "DETAILS", xaxt='n', yaxt='n')
text(10, 85, names(cmtrx$byClass[1]), cex=1.2, font=2)
text(10, 70, round(as.numeric(cmtrx$byClass[1]), 3), cex=1.2)
text(36, 85, names(cmtrx$byClass[2]), cex=1.2, font=2)
text(36, 70, round(as.numeric(cmtrx$byClass[2]), 3), cex=1.2)
text(62, 85, names(cmtrx$byClass[5]), cex=1.2, font=2)
text(62, 70, round(as.numeric(cmtrx$byClass[5]), 3), cex=1.2)
text(90, 85, names(cmtrx$byClass[7]), cex=1.2, font=2)
text(90, 70, round(as.numeric(cmtrx$byClass[7]), 3), cex=1.2)
text(10, 35, names(cmtrx$overall[1]), cex=1.2, font=2)
text(10, 20, round(as.numeric(cmtrx$overall[1]), 3), cex=1.2)
text(36, 36, "AUC", cex=1.2, font=2)
text(36, 20, round(as.numeric(auc), 3), cex=1.2)
text(62, 36, "Gini", cex=1.2, font=2)
text(62, 20, round(as.numeric(gini), 3), cex=1.2)
text(90, 36, "Loss", cex=1.2, font=2)
text(90, 20, round(as.numeric(loss), 3), cex=1.2)
}
draw_confusion_matrix(cm1,svm.auc,svm.gini,costsvm)
cmtrx$byClass
cm1$byClass
cm1$table
cm1
runApp()
cm1
cm1
cm1$byClass
summary(cm1)
cm1 <- confusionMatrix(testSplit$Class,svm.predict)
cm1$byClass
?confusionMatrix
cm1 <- confusionMatrix(testSplit$Class,svm.predict,cutoff=0.5)
cm1 <- confusionMatrix(testSplit$Class,svm.predict)
cm1
cm2 <- confusionMatrix(testSplit$Class,as.factor(fitted.results))
cm2$byClass
table(cm1)
roc(as.numeric(svm.predict),testSplit$Class,main="ROC curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="1 - Specificity",ylab="Sensitivity",col="#377eb8",lwd=4)
roc(svm.predict,as.numeric(testSplit$Class),main="ROC curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="1 - Specificity",ylab="Sensitivity",col="#377eb8",lwd=4)
table(svm.predict)
table(testSplit$Class)
table(testSplit)
table(testSplit$Class)
table(trainSplit$Class)
dim(trainSplit)
runApp()
