shiny::runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp()
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp('~/Desktop/SVM Shiny/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/SVM Shiny/test')
runApp()
runApp('~/Desktop/SVM Shiny/test')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(DMwR)
library(e1071)
library(pROC)
library(class)
library(randomForest)
library(caret)
library(ineq)
library(smotefamily)
library(ROSE)
library(lift)
runApp()
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"), labels=c("No","Yes"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
set.seed(12345)
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
#creditcard <- readRDS(file=url("https://raw.githubusercontent.com/VictorYeGitHub/SVM_PROJECT/master/creditcard.rds"))
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"), labels=c("No","Yes"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,test)
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,test,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
knn.model = knn(trainSplit[,-31],test[,-31],trainSplit$Class,k=5)
rf.model <- randomForest(Class~.,trainSplit , mtry=4, importance = TRUE)
rf.pred <- predict(rf.model, test)
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=input$costrad, gamma=input$gammrad)
svm.predict <- predict(svm.model,test)
roc(svm.predict,as.numeric(test$Class),plot=T,main="SVM with radial kernel",legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=30, print.auc.x=25)
par(pty="s")
a <- as.numeric(test$Class)
roc(svm.predict,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4)
plot.roc(fitted.results,a,percent=T,col="#4daf4a",lwd=4,add=TRUE)
plot.roc(knn.model,a,percent=T,col="#850606",lwd=4,add=TRUE)
plot.roc(rf.pred,a,percent=T,col="#EE82EE",lwd=4,add=TRUE)
legend("bottomright",legend=c("SVM","Logistic Regression","KNN","Random Forest"),col=c("#377eb8","#4daf4a","#850606","#EE82EE"),lwd=4)
plot(Lc(rf.pred),col="#EE82EE",lwd=4)
lines(Lc(svm.predict),col="#377eb8",lwd=4)
lines(Lc(fitted.results),col="#4daf4a",lwd=4)
lines(Lc(knn.model),col="#850606",lwd=4)
legend("topleft",legend=c("SVM","Logistic Regression","KNN","Random Forest"),col=c("#377eb8","#4daf4a","#850606","#EE82EE"),lwd=4)
b <- as.factor(fitted.results)
cm2 <- confusionMatrix(b,test$Class)
cm2
cm2$byClass
cm3 <- confusionMatrix(knn.model,test$Class)
cm3
cm3$byClass
cm4 <- confusionMatrix(rf.pred,test$Class)
cm4
cm4$byClass
ineq(svm.predict,type="Gini")
ineq(fitted.results,type="Gini")
ineq(knn.model,type="Gini")
ineq(rf.pred,type="Gini")
plotLift(svm.predict,a,cumulative=T)
plotLift(knn.model,a,cumulative=T)
plotLift(fitted.results,a,cumulative=T)
plotLift(rf.pred,a,cumulative=T)
cm2 <- confusionMatrix(b,test$Class)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm1
cm1$byClass
b <- as.factor(fitted.results)
cm2 <- confusionMatrix(b,test$Class)
str(b)
str(test$Class)
table(test$Class)
table(b)
str(fitted.results)
table(fitted.results)
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"), labels=c("No","Yes"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
### Donn?es
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
### SUPPORT VECTOR MACHINE
#tune.svm <- tune(svm,train.x=trainSplit[,-31],train.y=trainSplit[,31],kernel='radial',ranges=list(cost=c(1,5,10), gamma=c(.1,.5,1)))
#summary(tune.svm)
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=6, gamma=0.3)
svm.predict <- predict(svm.model,test)
### REGRESSION LOGISTIQUE
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,test,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
b <- as.factor(fitted.results)
table(fitted.results)
cm2 <- confusionMatrix(b,test$Class)
cm2
cm2$byClass
runApp()
#Lips Curve
plotLift(svm.predict,a,cumulative=T,color="#850606")
plotLift(svm.predict,a,cumulative=T,color="#850606")
plotLift(knn.model,a,cumulative=T)
knn.model = knn(trainSplit[,-31],test[,-31],trainSplit$Class,k=5)
rf.model <- randomForest(Class~.,trainSplit , mtry=4, importance = TRUE)
rf.pred <- predict(rf.model, test)
plotLift(rf.pred,a,cumulative=T)
a <- as.numeric(test$Class)
#Lips Curve
plotLift(svm.predict,a,cumulative=T,color="#850606")
#Lips Curve
plotLift(svm.predict,a,cumulative=T,col="#850606")
plotLift(knn.model,a,cumulative=T)
plotLift(fitted.results,a,cumulative=T)
plotLift(rf.pred,a,cumulative=T)
#Lips Curve
plotLift(svm.predict,a,cumulative=T,col="#850606")
plotLift(knn.model,a,cumulative=T)
plotLift(fitted.results,a,cumulative=T)
#Lips Curve
plotLift(svm.predict,a,cumulative=T,col="#850606")
plotLift(knn.model,a,cumulative=T)
plotLift(fitted.results,a,cumulative=T)
plotLift(rf.pred,a,cumulative=T)
#Lips Curve
par(mfrow(4,1))
#Lips Curve
par=mfrow(4,1))
#Lips Curve
par(mfrow = c(4,1))
plotLift(svm.predict,a,cumulative=T,col="#850606")
plotLift(svm.predict,a,cumulative=T,col="#850606")
plotLift(knn.model,a,cumulative=T)
plotLift(fitted.results,a,cumulative=T)
#Lips Curve
par(mfrow = c(4,1))
plotLift(svm.predict,a,cumulative=T,col="#850606")
#Lips Curve
par(mfrow = c(4,2))
plotLift(svm.predict,a,cumulative=T,col="#850606")
plotLift(knn.model,a,cumulative=T)
plotLift(svm.predict,a,cumulative=T,col="#850606")
#Lips Curve
par(mfrow = c(2,2))
plotLift(svm.predict,a,cumulative=T,col="#850606")
plotLift(knn.model,a,cumulative=T)
plotLift(fitted.results,a,cumulative=T)
plotLift(rf.pred,a,cumulative=T)
plotLift(svm.predict,a,cumulative=T,col="#850606", main="Lest")
plotLift(knn.model,a,cumulative=T)
plotLift(fitted.results,a,cumulative=T)
plotLift(rf.pred,a,cumulative=T)
runApp()
runApp()
str(numsvm)
numsvm=as.numeric(svm.predict)
cost_model(numsvm,a, test$Amount, fixedcost=10)
library(ROSE)
library(lift)
library(smotefamily)
str(numsvm)
numsvm=as.numeric(svm.predict)
cost_model(numsvm,a, test$Amount, fixedcost=10)
cost_model = function(predicted.classes, true.classes, amounts, fixedcost) {
cost = sum(true.classes*(1 - predicted.classes)*amounts +
predicted.classes*fixedcost)
return(cost)
}
str(numsvm)
numsvm=as.numeric(svm.predict)
cost_model(numsvm,a, test$Amount, fixedcost=10)
str(fitted.results)
numfit=as.numeric(fitted.results)
str(numfit)
cost_model(numfit,a, test$Amount, fixedcost=10)
str(knn.model)
numknn=as.numeric(knn.model)
str(numknn)
cost_model(numknn,a, test$Amount, fixedcost=10)
which.min(error.rate)
knn.model = knn(trainSplit[,-31],test[,-31],trainSplit$Class,k=1)
numsvm=as.numeric(svm.predict)
cost_model(numsvm,a, test$Amount, fixedcost=10)
str(fitted.results)
numfit=as.numeric(fitted.results)
str(numfit)
cost_model(numfit,a, test$Amount, fixedcost=10)
str(knn.model)
numknn=as.numeric(knn.model)
str(numknn)
cost_model(numknn,a, test$Amount, fixedcost=10)
str(rf.pred)
numrf=as.numeric(rf.pred)
str(numrf)
cost_model(numrf,a, test$Amount, fixedcost=10)
shiny::runApp()
runApp()
runApp()
runApp()
