runApp('~/Downloads/openfda-dashboard-master')
runApp('~/Desktop/SVM Shiny/SVMS')
runApp('~/Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
shiny::runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Downloads/openfda-dashboard-master')
runApp('~/Desktop/SVM Shiny/SVMS')
runApp()
shiny::runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
creditcard <- read.csv("/Users/Victor/Desktop/SVM Shiny/SVMS/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(12345)
creditcard <- creditcard[sample(nrow(creditcard)),]
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 300, perc.under = 150, k=5)
train = sample(1:nrow(smote_data),nrow(smote_data)*0.7)
trainSplit = smote_data[train,]
testSplit = smote_data[-train,]
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,testSplit)
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,testSplit,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
knn.model = knn(trainSplit[,-31],testSplit[,-31],trainSplit$Class,k=5)
rf.model <- randomForest(Class~.,trainSplit , mtry=4, importance = TRUE)
rf.pred <- predict(rf.model, testSplit)
roc(svm.predict,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=40, print.auc.x=10)
a <- as.numeric(testSplit$Class)
roc(svm.predict,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=40, print.auc.x=10)
plot.roc(fitted.results,a,percent=T,col="#4daf4a",lwd=4,print.auc=TRUE,add=TRUE,print.auc.y=35,print.auc.x=10)
plot.roc(fitted.results,a,percent=T,col="#4daf4a",lwd=4,print.auc=TRUE,add=TRUE,print.auc.y=35,print.auc.x=10)
legend("bottomright",legend=c("SVM","Logistic Regression","KNN","Random Forest"),col=c("#377eb8","#4daf4a","#850606","#EE82EE"),lwd=4)
legend("bottomright",legend=c("SVM","KNN"),col=c("#377eb8","#4daf4a"),lwd=4)
legend("bottomright",legend="Logistic Regression",col="#377eb8",lwd=4)
legend("bottomright",legend=c("SVM","KNN"),col=c("#377eb8","#4daf4a"),lwd=4)
legend("bottomright",legend="Logistic Regression",col="#377eb8",lwd=4)
plot.roc(rf.pred,a,percent=T,col="#EE82EE",lwd=4,print.auc=TRUE,add=TRUE,print.auc.y=25,print.auc.x=10
, legend="SVM", col="#377eb8")
legend("bottomright",legend=c("SVM","KNN"),col=c("#377eb8","#4daf4a"),lwd=4)
legend("bottomright",legend="Logistic Regression",col="#377eb8",lwd=4)
legend("bottomright",legend=c("SVM","KNN"),col=c("#377eb8","#4daf4a"),lwd=4)
legend("bottomright",legend="Logistic Regression",col="#377eb8",lwd=4)
??plot.roc
plot.roc(fitted.results,a,percent=T,col="#4daf4a",lwd=4,print.auc=TRUE,add=TRUE,print.auc.y=35,print.auc.x=10, legend=TRUE)
roc(svm.predict,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=40, print.auc.x=10)
plot.roc(fitted.results,a,percent=T,col="#4daf4a",lwd=4,print.auc=TRUE,add=TRUE,print.auc.y=35,print.auc.x=10, legend=TRUE)
legend("bottomright",legend=0,col="#377eb8",lwd=4)
legend("bottomright",legend=NULL,col="#377eb8",lwd=4)
legend("bottomright",legend=c("SVM","KNN"),col=c("#377eb8","#4daf4a"),lwd=4)
legend("bottomright",legend=NULL,col="#377eb8",lwd=4)
legend("bottomright",legend="NULL",col="#377eb8",lwd=4)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
cm1$byClass
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
cm1$byClass
runApp('Desktop/SVM Shiny/SVMS')
cm1$byClass[,1:2]
cm1$byClass[,1:2]
cm1$byClass
cm1$byClass[1:2,]
cm1$byClass[1:2]
cm1$byClass[1:2]
p=c(cm1$byClass,cm2$byClass)
cm2$byClass
cm2 <- confusionMatrix(b,testSplit$Class)
b <- as.factor(fitted.results)
cm2 <- confusionMatrix(b,testSplit$Class)
cm2$byClass
p=c(cm1$byClass,cm2$byClass)
p
p=c(cm1$byClass[1:2],cm2$byClass[1:2])
p
p=rbind(cm1$byClass[1:2],cm2$byClass[1:2])
p
m=cbind("SVM",p)
m
m=cbind(SVM,p)
m
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
k=cbind("Logistic Regression",cm2$byClass[1:2])
k
k=rbind("Logistic Regression",cm2$byClass[1:2])
k
cm2$byClass[1:2]
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
k
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(k,l,m)
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
cm2 <- confusionMatrix(as.factor(fitted.results),testSplit$Class)
cm3 <- confusionMatrix(knn.model,testSplit$Class)
cm4 <- confusionMatrix(rf.pred,testSplit$Class)
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(k,l,m)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
cm2 <- confusionMatrix(as.factor(fitted.results),testSplit$Class)
cbind("Logistic Regression",t(cm2$byClass[1:2]))
runApp('Desktop/SVM Shiny/SVMS')
y <- reactive({input$compare})
y
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
q=cbind("SVM",t(cm1$byClass[1:2]))
cm2 <- confusionMatrix(as.factor(fitted.results),testSplit$Class)
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
cm1 <- confusionMatrix(svm.predict,testSplit$Class)
q=cbind("SVM",t(cm1$byClass[1:2]))
cm2 <- confusionMatrix(as.factor(fitted.results),testSplit$Class)
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
y
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("KNN",t(cm3$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,k,l,m)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Logistic Regression",t(cm2$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("KNN",t(cm3$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
s=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,s)
q=cbind("SVM",t(cm1$byClass[1:2]))
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
rbind(q,k,l,m)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
q=cbind("SVM",t(cm1$byClass[1:2]))
k=cbind("Logistic Regression",t(cm2$byClass[1:2]))
l=cbind("KNN",t(cm3$byClass[1:2]))
m=cbind("Random Forest",t(cm4$byClass[1:2]))
d=rbind(q,k,l,m)
names(d)[1]<-"MÃ©thode"
d
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
ineq(svm.predict,type="Gini")
ineq(fitted.results,type="Gini")
ineq(knn.model,type="Gini")
ineq(rf.pred,type="Gini")
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
q=cbind(Method="SVM",round(t(cm1$byClass[1:2]),digits=4),Gini=round(ineq(svm.predict,type="Gini"),digits=4))
s=cbind("Logistic Regression",round(t(cm2$byClass[1:2],digits=4)),round(ineq(fitted.results,type="Gini"),digits=4))
rbind(q,s)
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
runApp('Desktop/SVM Shiny/SVMS')
install.packages("rsconnect")
shiny::runApp('Documents/GitHub/SVM_PROJECT')
??roc
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
install.packages("smotefamily")
install.packages("smotefamily")
library(DMwR)
library(e1071)
library(pROC)
library(class)
library(randomForest)
library(caret)
library(ineq)
library(smotefamily)
library(ROSE)
library(lift)
### Donn?es
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"), labels=c("No","Yes"))
set.seed(12345)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainSplit = ovun.sample(Class~.,train,method="both",N=30000,p=0.3,seed=2018)
trainFraud = trainSplit$data
table(trainFraud$Class)
prop.table(table(trainFraud$Class))
### SUPPORT VECTOR MACHINE
tune.svm <- tune(svm,train.x=trainSplit[,-31],train.y=trainSplit[,31],kernel='radial',ranges=list(cost=c(2,4,6,8,10), gamma=c(0.2,0.4,0.6,0.8,1)))
### SUPPORT VECTOR MACHINE
tune.svm <- tune(svm,train.x=trainFraud[,-31],train.y=trainFraud[,31],kernel='radial',ranges=list(cost=c(2,4,6,8,10), gamma=c(0.2,0.4,0.6,0.8,1)))
trainSplit = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2018)
trainFraud = trainSplit$data
table(trainFraud$Class)
prop.table(table(trainFraud$Class))
### SUPPORT VECTOR MACHINE
tune.svm <- tune(svm,train.x=trainFraud[,-31],train.y=trainFraud[,31],kernel='radial',ranges=list(cost=c(4,6,8), gamma=c(0.4,0.6,0.8)))
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
library(DMwR)
library(e1071)
library(pROC)
library(class)
library(randomForest)
library(caret)
library(ineq)
library(smotefamily)
library(ROSE)
library(lift)
### Donn?es
creditcard <- read.csv("/Users/Victor/creditcard.csv")
### Donn?es
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"), labels=c("No","Yes"))
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainSplit = ovun.sample(Class~.,train,method="both",N=20000,p=0.3,seed=2018)
trainFraud = trainSplit$data
table(trainFraud$Class)
prop.table(table(trainFraud$Class))
### SUPPORT VECTOR MACHINE
#tune.svm <- tune(svm,train.x=trainSplit[,-31],train.y=trainSplit[,31],kernel='radial',ranges=list(cost=c(5,6,7,8,9,10), gamma=.3))
#summary(tune.svm)
svm.model <- svm(Class ~ ., data=trainFraud, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,test,type="prob")
#AUC AUPRC
a = as.numeric(svm.predict)
roc(test$Class,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=40, print.auc.x=10)
roc(test$Class,a,main="ROC Curve",plot=T,legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=40, print.auc.x=10)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
creditcard <- readRDS(file=url("https://raw.githubusercontent.com/VictorYeGitHub/SVM_PROJECT/master/creditcard.rds"))
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
s
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
library(shiny)
library(DMwR)
library(e1071)
library(pROC)
library(class)
library(randomForest)
library(caret)
library(ineq)
library(shinythemes)
library(smotefamily)
library(ROSE)
library(lift)
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,test)
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,test,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
runApp('Documents/GitHub/SVM_PROJECT')
knn.model = knn(trainSplit[,-31],test[,-31],trainSplit$Class,k=1)
rf.model <- randomForest(Class~.,trainSplit , mtry=1, importance = TRUE)
rf.pred <- predict(rf.model, test)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
rf.pred <- predict(rf.model, test)
rf.model <- randomForest(Class~.,trainSplit , mtry=1, importance = TRUE)
rf.pred <- predict(rf.model, test)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
set.seed(12345)
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
#creditcard <- readRDS(file=url("https://raw.githubusercontent.com/VictorYeGitHub/SVM_PROJECT/master/creditcard.rds"))
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(2019)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[samp,]
test = creditcard[-samp,]
trainFraud = ovun.sample(Class~.,train,method="both",N=10000,p=0.3,seed=2019)
trainSplit = trainFraud$data
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=5, gamma=0.3)
svm.predict <- predict(svm.model,test)
log.model <- glm(Class~.,trainSplit,family="binomial")
log.predict <- predict(log.model,test,type="response")
fitted.results <- ifelse(log.predict > 0.5,1,0)
knn.model = knn(trainSplit[,-31],test[,-31],trainSplit$Class,k=1)
rf.model <- randomForest(Class~.,trainSplit , mtry=1, importance = TRUE)
rf.pred <- predict(rf.model, test)
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=input$costrad, gamma=input$gammrad)
svm.predict <- predict(svm.model,test)
roc(svm.predict,as.numeric(test$Class),plot=T,main="SVM with radial kernel",legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=30, print.auc.x=25)
svm.model <- svm(Class ~ ., data=trainSplit, kernel="radial", cost=input$costrad, gamma=input$gammrad)
svm.predict <- predict(svm.model,test)
roc(svm.predict,as.numeric(test$Class),plot=T,main="SVM with radial kernel",legacy.axes=TRUE,percent=TRUE,xlab="False Positive Percentage",ylab="True Positive Percentage",col="#377eb8",lwd=4,print.auc=T,print.auc.y=30, print.auc.x=25)
plot(Lc(svm.predict),main="Lorenz curve",col="#377eb8",lwd=4, xlab="Cumulative percentage of the population", ylab="Cumulative percentage of the variable Class")
lines(Lc(fitted.results),col="#4daf4a",lwd=4)
lines(Lc(knn.model),col="#850606",lwd=4)
lines(Lc(rf.pred),col="#EE82EE",lwd=4)
cm1 <- confusionMatrix(svm.predict,test$Class)
cm2 <- confusionMatrix(as.factor(fitted.results),test$Class)
cm3 <- confusionMatrix(knn.model,test$Class)
cm4 <- confusionMatrix(rf.pred,test$Class)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
table(smote_data$Class)
set.seed(12345)
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
creditcard <- creditcard[sample(nrow(creditcard)),]
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 300, perc.under = 550, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 300, perc.under = 500, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 400, perc.under = 500, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 500, k=5)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 200, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 300, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 350, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 310, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 320, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 300, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 290, k=5)
table(smote_data$Class)
smote_data <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 285, k=5)
table(smote_data$Class)
runApp('Documents/GitHub/SVM_PROJECT')
creditcard <- read.csv("/Users/Victor/Desktop/creditcard.csv")
creditcard$Class <- factor(creditcard$Class, levels=c("0","1"))
set.seed(12345)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[train,]
testSplit = creditcard[-train,]
str(train)
str(test)
set.seed(12345)
creditcard <- creditcard[sample(nrow(creditcard)),]
samp = sample(1:nrow(creditcard),nrow(creditcard)*0.7)
train = creditcard[train,]
testSplit = creditcard[-train,]
train = creditcard[samp,]
testSplit = creditcard[-samp,]
str(train)
str(testSplit)
table(train$Class)
table(testSplit$Class)
prob.table(table(train$Class))
trainSplit <- SMOTE(Class ~ ., data  = creditcard, perc.over = 500, perc.under = 285, k=5)
str(trainSplit$Class)
table(trainSplit$Class)
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp('Documents/GitHub/SVM_PROJECT')
shiny::runApp()
runApp()
??svm
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
